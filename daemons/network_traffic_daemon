#!/usr/bin/env python
from daemon import Daemon
from service_utils import *

FORMAT = '%(message)s'
logging.basicConfig(filename=NETWORK_LOG,level=logging.DEBUG,format=FORMAT)


class DaemonProcess(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		self.buffer=[]
		self.RUNNING=False

	def get_data(self,*args):

		self.t_last_call=time.time()

		if not self.RUNNING:
			self.RUNNING=True
			logging.debug("tcp_daemon self-starting")
			thread.start_new_thread(self.while_running,())

		"""
		assume only 1 client and clear data each time requested
		"""
		rval=copy.copy(self.buffer)

		if AM_DEMO:
			pass
		else:
			self.buffer.__init__()
		#logging.debug(`rval`)
		return rval

	def getRxTx(self):
		infname='/proc/self/net/dev'
		cmd="cat %s"%infname
		p=os.popen(cmd)
		rval=[]

		for i in range(0,2):
			throw=p.readline()

		for i in range(2,4):

			try:
				line=p.readline()

				#we grab localhost interface too ... since in middle and could be of interest
				for x in range(100):line=string.replace(line,'  ',' ')
				iface=string.strip(line.split(":")[0])
				rx=string.strip(line.split(":")[1]).split(' ')[0]
				tx=string.strip(line.split(":")[1]).split(' ')[8]
				rval.append(iface)
				rval.append(eval(rx))
				rval.append(eval(tx))

			except Exception,e:
				logging.exception("exception at getRxTx")

		p.close()
		return [rval]

	def while_running(self,*args):

		t_last=time.time()
		rxtx_last=self.getRxTx()
		time.sleep(TSLEEP)

		while self.RUNNING:

			if self.t_last_call<time.time()-30:
				self.RUNNING=False
				logging.info("network_traffic_daemon self-stopping")

			tstamp=mktstamp()

			t_now=time.time()
			dt=t_now-t_last

			rxtx=self.getRxTx()

			for dummy in range(len(rxtx)):

				iface0=rxtx[dummy][0]
				drxdt0=rxtx[dummy][1]-rxtx_last[dummy][1]
				dtxdt0=rxtx[dummy][2]-rxtx_last[dummy][2]

				iface1=rxtx[dummy][3];#should be 3,4,5 but mirroring eth0
				drxdt1=rxtx[dummy][4]-rxtx_last[dummy][1]
				dtxdt1=rxtx[dummy][5]-rxtx_last[dummy][2]

				msg="%.02f,%s,%s %d %d,%s %d %d"%(t_now,tstamp,iface0,drxdt0,dtxdt0,iface1,drxdt1,dtxdt1)

				#iface2=rxtx[dummy][6];
				#drxdt2=rxtx[dummy][7]-rxtx_last[dummy][7]
				#dtxdt2=rxtx[dummy][8]-rxtx_last[dummy][8]
				#msg="%.02f,%s,%s %d %d,%s %d %d,%s %d %d"%(t_now,tstamp,iface0,drxdt0,dtxdt0,iface1,drxdt1,dtxdt1,iface2,drxdt2,dtxdt2)

				#logging.debug(msg)
				self.buffer.append(msg)

			#scenerio: nobody's expired,large buffer, then trickle of traffic and only removing 10x per matched line
			#i.e. not clearing out fast enough ... hence dangerour while loop:
			while True:
				try:
					x=eval(string.split(self.buffer[0],",")[0])
					t_min=time.time()-BUFFSIZE
					if x<t_min:
						self.buffer.pop(0)
					else:break
				except Exception,e:
					logging.exception("exception clearing tcp buffer")
					break

			t_last=t_now
			rxtx_last=rxtx
			time.sleep(0.99)


	def run(self):

		self.RUNNING=False

		self.server=SimpleXMLRPCServer((get_rpc_hostname(),TRAFFIC_SERVICE_PORT))
		self.server.register_introspection_functions()
		self.server.register_instance(self)
		self.server.serve_forever()



if __name__=="__main__":

	daemon=DaemonProcess('/var/run/network_traffic_daemon.pid')

	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:
			daemon.start()
		elif 'stop'==sys.argv[1]:
			daemon.stop()
		elif 'restart'==sys.argv[1]:
			daemon.restart()
		elif 'status'==sys.argv[1]:
			if os.path.exists('/var/run/network_traffic_daemon.pid'):
				print 'running'
			else:
				print 'stopped'

		else:
			logging.debug("UNK")
			print "Unknown command"
			sys.exit(2)
		sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status"%sys.argv[0]
		sys.exit(2)
