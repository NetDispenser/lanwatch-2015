#!/usr/bin/env python
from daemon import Daemon
#from service_utils import *
#from country_codes import *
#from ip_idns import *
import logging,json,time,sys,os
from xmlrpc.server import SimpleXMLRPCServer
import threading
from queue import Queue

FORMAT = '%(message)s'
logging.basicConfig(filename='xtcpd.log',level=logging.DEBUG,format=FORMAT)
logging.disable(logging.DEBUG)

lock = threading.Lock()


class DaemonProcess(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		self.q = Queue()
		self.pcount=0
		self.exit_count=0
		self.create_count=0
		self.RUNNING=False
		self.tids=[]
		self.DEBUG=False

	def harvest(self):
		cmd="tcpdump -i eth0 -l -s 0 -n"
		p=os.popen(cmd)
		while True:
			self.q.put(p.readline())
			for dummy in range(3-len(self.tids)):
					t=threading.Thread(target=self.process)
					t.daemon=True
					t.start()
					self.tids.append(t)
					self.create_count+=1


	def process(self):
		while True:
			with lock:
				logging.debug(threading.current_thread().name+" getting item")
				item=self.q.get()
				if item:
					logging.debug(threading.current_thread().name+" got item "+item)
					self.pcount+=1
				else:
					logging.debug(threading.current_thread().name+" EXITING")
					self.tids.remove(threading.current_thread())
					threading.current_thread().exit()
					self.exit_count+=1

	def toggle_debug(self,*args):
		if not self.DEBUG:
			self.DEBUG=True
			logging.disable(logging.NOTSET)
		else:
			self.DEBUG=False
			logging.disable(logging.DEBUG)

		return self.DEBUG

	def get_data(self,*args):
		logging.debug("get_data")
		self.t_last_call=time.time()
		if not self.RUNNING:
			self.RUNNING=True
			logging.debug("tcp_daemon self-starting")
			t = threading.Thread(target=self.harvest)
			t.daemon = True  # thread dies when main thread (only non-daemon thread) exits.
			t.start()

		rval={
			'time':time.time(),
			'qsize':self.q.qsize(),
			'pcount':self.pcount,
			'exit_count':self.exit_count,
			'create_count':self.create_count,
			'len(tids)':len(self.tids),
		}
		return json.dumps(rval)

	def run(self):
		self.RUNNING=False
		self.server=SimpleXMLRPCServer(('localhost',8000))
		self.server.register_introspection_functions()
		self.server.register_function(self.toggle_debug)
		self.server.register_instance(self)
		self.server.serve_forever()

if __name__=="__main__":

	daemon=DaemonProcess('/var/run/xtcpd.pid')

	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:
			daemon.start()
		elif 'stop'==sys.argv[1]:
			daemon.stop()
		elif 'restart'==sys.argv[1]:
			daemon.restart()
		elif 'status'==sys.argv[1]:
			if os.path.exists('/var/run/xtcpd.pid'):
				print('running')
			else:
				print('stopped')
		else:
			logging.debug("UNK")
			print("Unknown command")
			sys.exit(2)
		sys.exit(0)
	else:
		print("usage: %s start|stop|restart|status"%sys.argv[0])
		sys.exit(2)
