#!/usr/bin/env python
from daemon import Daemon
#from service_utils import *
#from country_codes import *
#from ip_idns import *
import logging,json,time,sys,os,re,copy,datetime
from xmlrpc.server import SimpleXMLRPCServer
import threading
from queue import Queue

FORMAT = '%(message)s'
logging.basicConfig(filename='xtcpd.log',level=logging.DEBUG,format=FORMAT)
logging.disable(logging.DEBUG)

lock = threading.Lock()

import GeoIP
gip=GeoIP.open("/usr/share/GeoIP/GeoLiteCity.dat",GeoIP.GEOIP_STANDARD)
rexp=re.compile('(\d+:\d+:\d+)(\.\d+) (IP) (.*)(\.\d+) > (\d+\.\d+\.\d+\.\d+)(\.\d+)(.*)')
tcpdump_cmd="tcpdump -i eth0 -l -s 0 -n"

class DaemonProcess(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		self.CONFIG=None
		self.reload_config()
		self.q = Queue()
		self.pcount=0
		self.create_count=0
		self.RUNNING=False
		self.DEBUG=False
		self.buffer=[]
		self.ips={}
		self.t=None
		self.t_last=time.perf_counter()
		self.cities=[]
		self.countries=[]

	def harvest(self):
		p=os.popen(tcpdump_cmd)
		while True:
			if self.RUNNING:
				self.q.put(p.readline())
				for dummy in range(self.CONFIG['num_threads']-threading.active_count()):
					logging.debug("creating thread")
					t=threading.Thread(target=self.process)
					t.daemon=True
					t.start()
					self.create_count+=1
			else:
				p.flush()
				time.sleep(.2)

	def process(self):
		while True:
			with lock:
				item=self.q.get()
				a=rexp.match(item)
				if not a:continue
				else:self.pcount+=1

				src=a.group(4)
				sport=a.group(5)
				dst=a.group(6)
				dport=a.group(7)
				"""
				if src in self.ips:
					self.ips[src]['count']+=1
				else:
					g=gip.record_by_addr(src)
					if g:
						g['count']=1
						self.ips[src]=g
						self.buffer.append(src)
						self.cities.append(g['city'])
						self.countries.append(g['country_code'])
					else:self.ips[src]={'count':1,}
				"""
				if dst in self.ips:
					self.ips[dst]['count']+=1
				else:
					g=gip.record_by_addr(dst)
					if g:
						g['count']=1
						self.ips[dst]=g
						self.buffer.append(dst)
						self.cities.append(g['city'])
						self.countries.append(g['country_code'])
					else:self.ips[dst]={'count':1,}

				msg="%s %s -> %s %s"%(src,sport,dst,dport)

	def toggle_debug(self,*args):
		if not self.DEBUG:
			self.DEBUG=True
			logging.disable(logging.NOTSET)
		else:
			self.DEBUG=False
			logging.disable(logging.DEBUG)
		rval={'keys':['debug'],'debug':self.DEBUG}
		return json.dumps(rval)

	def toggle_running(self,*args):
		if not self.t:
			self.t = threading.Thread(target=self.harvest)
			self.t.daemon = True
			self.t.start()

		if not self.RUNNING:
			self.RUNNING=True
		else:
			self.RUNNING=False

		rval={'keys':['running'],'running':self.RUNNING}
		return json.dumps(rval)

	def get_data(self,*args):
		#logging.debug("get_data")
		t_now=time.perf_counter()
		dt=t_now-self.t_last
		self.t_last=t_now

		rval={
			'keys':['server_time','dt','qsize','pcount','create_count','running','debug','active','buffer','ipkeys','cities','countries'],
			'server_time':"%s"%datetime.datetime.now(),
			'dt':"%.3f"%dt,
			'qsize':self.q.qsize(),
			'pcount':self.pcount,
			'create_count':self.create_count,
			'running':self.RUNNING,
			'active':threading.active_count(),
			'buffer':json.dumps(self.buffer),
			'debug':self.DEBUG,
			'ipkeys':json.dumps(list(self.ips.keys())),
			'cities':json.dumps(self.cities),
			'countries':json.dumps(self.countries),
		}
		self.buffer.__init__()
		return json.dumps(rval)

	def reload_config(self,*args):
		try:
			logging.debug("reload_config")
			inf=open('/var/www/rpi/xtcpd/daemons/xtcpd.config','r')
			self.CONFIG=eval(inf.readline().rstrip())
			inf.close()
			logging.debug('config reloaded')
			return {'keys':['rval'],'rval':True}
		except:
			logging.exception(sys.exc_info())
			return {'keys':['rval'],'rval':False}

	def reset(self,*args):
		self.ips={}
		self.pcount=0
		self.cities.__init__()
		self.countries.__init__()
		self.buffer.__init__()
		return {'keys':['rval'],'rval':True}

	def run(self):
		self.RUNNING=False
		self.server=SimpleXMLRPCServer(('localhost',8000))
		self.server.register_introspection_functions()
		self.server.register_function(self.toggle_debug)
		self.server.register_function(self.toggle_running)
		self.server.register_function(self.reload_config)
		self.server.register_function(self.reset)
		self.server.register_instance(self)
		self.server.serve_forever()

if __name__=="__main__":
	daemon=DaemonProcess('/var/run/xtcpd.pid')
	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:
			daemon.start()
		elif 'stop'==sys.argv[1]:
			daemon.stop()
		elif 'restart'==sys.argv[1]:
			daemon.restart()
		elif 'status'==sys.argv[1]:
			if os.path.exists('/var/run/xtcpd.pid'):
				print('running')
			else:
				print('stopped')
		else:
			logging.debug("UNK")
			print("Unknown command")
			sys.exit(2)
		sys.exit(0)
	else:
		print("usage: %s start|stop|restart|status"%sys.argv[0])
		sys.exit(2)
