#!/usr/bin/env python
from daemon import Daemon
#from service_utils import *
#from country_codes import *
#from ip_idns import *
import logging,json,time,sys,os,re,copy,datetime
from idns.country_codes import *

line='>pcount\ttstamp\tsrc_dst_idn\tport_port_idn\tnetrange_idn\tcountry_idn\tsrc_idn\tdst_idn\tlat\tlon\n'
ouf=None
if not os.path.exists('./ntuple.dat'):
	ouf=open('ntuple.dat','w')
	ouf.write(line)

FORMAT = '%(message)s'
logging.basicConfig(filename='xtcpd.log',level=logging.DEBUG,format=FORMAT)
logging.disable(logging.DEBUG)

if sys.version_info[0]==3:
	logging.debug("from xmlrpc.server import SimpleXMLRPCServer")
	from xmlrpc.server import SimpleXMLRPCServer
elif sys.version_info[0]==2:
	logging.debug("from xmlrpclib import SimpleXMLRPCServer")
	from xmlrpclib import SimpleXMLRPCServer
else:
	logging.debug("from xmlrpclib import SimpleXMLRPCServer")
	from xmlrpclib import SimpleXMLRPCServer

import threading
from queue import Queue


XTCPD_PID='/var/run/xtcpd.pid'
XTCPD_LOCK = threading.Lock()

UBUNTU=False
if UBUNTU:
	XTCPD_HOSTNAME='xtcpd.asymptopia.org'
	XTCPD_CONFIG='/var/www/xtcpd/xapp/daemons/xtcpd.config'
	USE_PYGEOIP=True
else:
	XTCPD_HOSTNAME='spytools.asymptopia.org'
	XTCPD_CONFIG='/var/www/spytools/xtcpd/daemons/xtcpd.config'
	USE_PYGEOIP=False


gip=None
if USE_PYGEOIP:
	import pygeoip
	gip=pygeoip.GeoIP("/usr/share/GeoIP/GeoLiteCity.dat")
else:
	import GeoIP
	gip=GeoIP.open("/usr/share/GeoIP/GeoLiteCity.dat",GeoIP.GEOIP_STANDARD)

#import GeoIP
#gip=GeoIP.open("/usr/share/GeoIP/GeoLiteCity.dat",GeoIP.GEOIP_STANDARD)
rexp=re.compile('(\d+:\d+:\d+)(\.\d+) (IP) (.*)(\.\d+) > (\d+\.\d+\.\d+\.\d+)(\.\d+)(.*)')
tcpdump_cmd="tcpdump -i wlan0 -l -s 0 -n"

class DaemonProcess(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		self.CONFIG=None
		self.reload_config()
		self.q = Queue()
		self.pcount=0
		self.create_count=0
		self.RUNNING=False
		self.DEBUG=False
		self.buffer=[]
		self.t=None
		self.t_last=time.perf_counter()
		self.clients={}

		#both start empty so existence in {ipnetranges} => existence in {dB}
		self.ipnetranges={}
		self.dB={}

		self.first_whois=None
		if False:
			logging.debug("using first_whois.dat")
			inf=open('first_whois.dat','r')
			self.first_whois=eval(inf.read())
			inf.close()
			logging.debug(self.first_whois['NetRange'])

		#self.ignore=['192.168.68.1','192.168.68.37',]
		self.ignore=[]

		#src_dst_idn,port_port_idn,netrange_idn,country_idn,src_idn,dst_idn
		self.src_dst_idns={}
		self.port_port_idns={}
		self.netrange_idns={}
		self.src_idns={}
		self.dst_idns={}

	#NEED:some py2.7 - 3.4 issues here
	def mkwhois(self,ip):
		"""
		Another variation here could be to return ip every time; this would
		get unique geoip records without hammering whois.
		"""
		if self.first_whois:
			return self.first_whois
		whois={'keys':[],}
		if True:
			return whois

		cmd="whois %s"%ip
		p=os.popen(cmd)
		plines=p.readlines()
		p.close()

		for lidx in range(len(plines)):
			try:
				key,val=plines[lidx].split(":")
				whois[key.strip()]=val.strip()
				whois['keys'].append(key.strip())
			except:pass

		self.first_whois=copy.copy(whois)
		#logging.debug(self.first_whois)

		ouf=open('first_whois.dat','w')
		ouf.write(json.dumps(self.first_whois))
		ouf.close()

		return whois

	def add2dB(self,a):
		src=a.group(4)
		sport=a.group(5)
		ip=dst=a.group(6)
		dport=a.group(7)

		netrange=None
		whois=self.mkwhois(ip)
		if 'NetRange' in whois:
			netrange=whois['NetRange']
		else:
			netrange=ip

		self.ipnetranges[ip]=netrange

		#
		if netrange in self.dB:
			return netrange

		#
		logging.debug("creating %s"%netrange)
		g=gip.record_by_addr(ip)
		if g:g['keys']=list(g.keys())
		else:g={'keys':[],}
		self.dB[netrange]={
			'ips':{
				'keys':[ip,],
				ip:{'count':1,},
			},
			'netrange':netrange,
			'whois':whois,
			'geoip':g,
			'stats':{'keys':['count'],'count':1,},
			'keys':['ips','netrange','whois','geoip','stats'],
			'tcp':{
				'keys':['src','dst','sport','dport','raw',],
				'src':src,'dst':dst,'sport':sport,'dport':dport,#'raw':item,
			},
		}
		return netrange


	def harvest(self):
		p=os.popen(tcpdump_cmd)
		while True:
			if self.RUNNING:
				self.q.put(p.readline())
				for dummy in range(self.CONFIG['num_threads']-threading.active_count()):
					logging.debug("creating thread")
					t=threading.Thread(target=self.process)
					t.daemon=True
					t.start()
					self.create_count+=1
			else:
				p.flush()
				time.sleep(.2)

	def process(self):
		while True:
			#with XTCPD_LOCK:
			try:
				item=self.q.get()
				a=rexp.match(item)
				if not a:continue
				else:self.pcount+=1

				src=a.group(4)
				sport=a.group(5)
				dst=a.group(6)
				dport=a.group(7)

				msg="%s %s -> %s %s"%(a.group(4),a.group(5),a.group(6),a.group(7))
				logging.debug(msg)

				if dst in self.ignore:continue

				if dst in self.ipnetranges:
					netrange=self.ipnetranges[dst]#ensure ipnetranges prog-const'd from dB.keys !!!
				else:
					netrange=self.add2dB(a)#creates self.dB[netrange] and does GeoIP

				if not dst in self.dB[netrange]['ips']:
					logging.debug("adding %s"%dst)
					self.dB[netrange]['ips'][dst]={'count':1,}
					self.dB[netrange]['ips']['keys'].append(dst)
				else:
					logging.debug("incrementing %s"%dst)
					self.dB[netrange]['ips'][dst]['count']+=1
					self.dB[netrange]['stats']['count']+=1

				for client in self.clients:
					self.clients[client]['buffer'].append(self.dB[netrange])

				#logging.debug(self.dB[netrange])
				tstamp=time.perf_counter()
				src_dst="%s_%s"%(src,dst)
				if src_dst in self.src_dst_idns:
					src_dst_idn=self.src_dst_idns[src_dst]
				else:
					src_dst_idn=len(self.src_dst_idns)
					self.src_dst_idns[src_dst]=src_dst_idn
					cmd="echo '%s_%s:%d'|cat>>idns/src_dst.idn"%(src,dst,src_dst_idn)
					os.system(cmd)

				port_port="%s_%s"%(sport,dport)
				if port_port in self.port_port_idns:
					port_port_idn=self.port_port_idns[port_port]
				else:
					port_port_idn=len(self.port_port_idns)
					self.port_port_idns[port_port]=port_port_idn
					cmd="echo '%s_%s:%d'|cat>>idns/port_port.idn"%(sport,dport,port_port_idn)
					os.system(cmd)

				if netrange in self.netrange_idns:
					netrange_idn=self.netrange_idns[netrange]
				else:
					netrange_idn=len(self.netrange_idns)
					self.netrange_idns[netrange]=netrange_idn
					cmd="echo '%s:%d'|cat>>idns/netrange.idn"%(netrange,netrange_idn)
					os.system(cmd)

				if 'country_code' in self.dB[netrange]['geoip']:
					country_code=self.dB[netrange]['geoip']['country_code']
					country_idn=COUNTRY_CODES[country_code]
				else:
					country_idn=-1

				if src in self.src_idns:
					src_idn=self.src_idns[src]
				else:
					src_idn=len(self.src_idns)
					self.src_idns[src]=src_idn
					cmd="echo '%s:%d'|cat>>idns/src.idn"%(src,src_idn)
					os.system(cmd)

				if dst in self.src_idns:
					dst_idn=self.src_idns[dst]
				else:
					dst_idn=len(self.src_idns)
					self.src_idns[dst]=dst_idn
					cmd="echo '%s:%d'|cat>>idns/src.idn"%(dst,dst_idn)
					os.system(cmd)

				if 'latitude' in self.dB[netrange]['geoip']:
					lat=self.dB[netrange]['geoip']['latitude']
					lon=self.dB[netrange]['geoip']['longitude']
				else:
					lat=0.0
					lon=0.0
				#DATA FILE HEADER:
				#>pcount\ttstamp\tsrc_dst_idn\tport_port_idn\tnetrange_idn\tcountry_idn\tsrc_idn\tdst_idn\tlat\tlon
				event="%d\t%.03f\t%d\t%d\t%d\t%d\t%d\t%d\t%.03f\t%.03f\n"%(self.pcount,tstamp,src_dst_idn,port_port_idn,netrange_idn,country_idn,src_idn,dst_idn,lat,lon)
				cmd="echo '%s'>>ntuple.dat"%event
				#os.system(cmd)
				ouf.write(event)

			except:
				logging.exception(sys.exc_info())

	def toggle_debug(self,*args):
		if not self.DEBUG:
			self.DEBUG=True
			logging.disable(logging.NOTSET)
		else:
			self.DEBUG=False
			logging.disable(logging.DEBUG)
		rval={'keys':['debug'],'debug':self.DEBUG}
		return json.dumps(rval)

	def toggle_running(self,*args):
		if not self.t:
			self.t = threading.Thread(target=self.harvest)
			self.t.daemon = True
			self.t.start()

		if not self.RUNNING:
			self.RUNNING=True
		else:
			self.RUNNING=False

		rval={'keys':['running'],'running':self.RUNNING}
		return json.dumps(rval)

	def get_data(self,*args):
		#logging.debug("get_data")
		client=args[0]
		logging.debug("get_data: "+client)
		if not client in self.clients:
			self.clients[client]={'buffer':[]}
		t_now=time.perf_counter()
		dt=t_now-self.t_last
		self.t_last=t_now

		rval={
			'keys':['server_time','dt','qsize','pcount','create_count','running','debug','active','dB.keys','clients',],
			'server_time':"%s"%datetime.datetime.now(),
			'dt':"%.3f"%dt,
			'qsize':self.q.qsize(),
			'pcount':self.pcount,
			'create_count':self.create_count,
			'running':self.RUNNING,
			'active':threading.active_count(),
			'debug':self.DEBUG,
			'dB.keys':json.dumps(list(self.dB.keys())),
			'clients':json.dumps(self.clients),
		}
		self.clients[client]['buffer'].__init__()
		return json.dumps(rval)

	def reload_config(self,*args):
		try:
			logging.debug("reload_config")
			inf=open(XTCPD_CONFIG,'r')
			self.CONFIG=eval(inf.readline().rstrip())
			inf.close()
			logging.debug('config reloaded')
			return {'keys':['rval'],'rval':True}
		except:
			logging.exception(sys.exc_info())
			return {'keys':['rval'],'rval':False}

	def reset(self,*args):
		self.dB={}
		self.pcount=0
		self.cities.__init__()
		self.countries.__init__()
		for client in self.clients:
			if client==args[0]:continue
			self.clients[client]['buffer'].__init__()
			self.clients.remove(client)
		return {'keys':['rval'],'rval':True}

	def run(self):
		self.RUNNING=False
		self.server=SimpleXMLRPCServer((XTCPD_HOSTNAME,8000))
		self.server.register_introspection_functions()
		self.server.register_function(self.toggle_debug)
		self.server.register_function(self.toggle_running)
		self.server.register_function(self.reload_config)
		self.server.register_function(self.reset)
		self.server.register_instance(self)
		self.server.serve_forever()

if __name__=="__main__":
	daemon=DaemonProcess(XTCPD_PID)
	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:
			daemon.start()
		elif 'stop'==sys.argv[1]:
			daemon.stop()
			ouf.close()
		elif 'restart'==sys.argv[1]:
			daemon.restart()
		elif 'status'==sys.argv[1]:
			if os.path.exists(XTCPD_PID):
				print('running')
			else:
				print('stopped')
		else:
			logging.debug("UNK")
			print("Unknown command")
			sys.exit(2)
		sys.exit(0)
	else:
		print("usage: %s start|stop|restart|status"%sys.argv[0])
		sys.exit(2)
