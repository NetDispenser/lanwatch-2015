#!/usr/bin/python
import os,sys,json,logging,re,copy,time
from xmlrpc.server import SimpleXMLRPCServer
import threading
from queue import Queue

from daemon import Daemon

SPECTRAD_PID='/var/run/spectrad.pid'
SPECTRAD_HOSTNAME="spytools.asymptopia.org"#spytools

FORMAT = 'SPECTRA: %(message)s'
logging.basicConfig(filename='/var/log/xtcpd/xtcpd.log',level=logging.DEBUG, format=FORMAT)

import GeoIP
gip=GeoIP.open("/usr/share/GeoIP/GeoLiteCity.dat",GeoIP.GEOIP_STANDARD)
#import pygeoip
#gip=pygeoip.GeoIP("/usr/share/GeoIP/GeoLiteCity.dat")

rexp=re.compile('(\d+:\d+:\d+)(\.\d+) (IP) (.*)(\.\d+) > (\d+\.\d+\.\d+\.\d+)(\.\d+)(.*)')
tcpdump_cmd="tcpdump -i wlan1 -l -s 0 -n|grep -v ARP"#wlan1

class SpectraDaemonProcess(Daemon):

	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		logging.debug("spectra.init")
		self.data={}#no keys:[] array since re-create regardless
		self.ttl={}
		self.q = Queue()
		self.t=None
		self.RUNNING=False

	def harvest(self):
		p=os.popen(tcpdump_cmd)
		while True:
			if self.RUNNING:
				self.q.put(p.readline())
				for dummy in range(10-threading.active_count()):
					logging.debug("creating thread")
					t=threading.Thread(target=self.process)
					t.daemon=True
					t.start()
			else:
				p.flush()
				time.sleep(1)

	def process(self):
		while True:
			try:
				item=self.q.get()
				logging.debug(item)
				a=rexp.match(item)
				if not a:continue
				src=a.group(4)
				sport=a.group(5)
				dst=a.group(6)
				dport=a.group(7)

				#if dst[0:3]=="192":continue
				if dst[0:3]=="255":continue
				#if dst[0:3]=="239":continue
				netrange=self.getNetRange(dst)
				country_code="US"
				longitude=-122.8037
				latitude=45.4871
				city="Beaverton"
				region_name="OR"
				country_code3="USA"
				country_name="United States"

				g=gip.record_by_addr(dst)
				if g:
					country_code=g['country_code']
					if not country_code:country_code="UNK"
					longitude=g['longitude']
					latitude=g['latitude']
					city=g['city']
					if not city:city="UNK"
					country_code3=g['country_code3']
					if not country_code3:coutry_code3="UNK"
					country_name=g['country_name']
					if not country_name:country_name="UNK"
					#region_name=g['region_name']
				#logging.debug("looping over client_ips")
				logging.debug(src+"->"+dst)

				for client_ip in list(self.data.keys()):
					if time.perf_counter()>self.ttl[client_ip]:
						logging.debug("deleting: "+client_ip)
						del self.data[client_ip]
						del self.ttl[client_ip]
						logging.debug('done.')
						continue
					#logging.debug(client_ip)
					try:
						test=list(self.data[client_ip].keys()).index(netrange)

						if self.data[client_ip][netrange]['ips'][dst]:
							self.data[client_ip][netrange]['ips'][dst]['count']+=1
						else:
							self.data[client_ip][netrange]['ips'][dst]={
								'src':src,
								'dst':dst,
								'count':1,
								'country_code':country_code,
								'country_code3':country_code3,
								'country_name':country_name,
								#'region_name':region_name,
								'city':city,
								'latitude':latitude,
								'longitude':longitude,
								'netrange':netrange,
							}
							self.data[client_ip][netrange]['ips']['keys'].append(dst)
						logging.debug("entry complete")
					except:
						logging.debug("creating manually: "+src+" "+dst+" "+netrange)
						self.data[client_ip][netrange]={
							'ips':{
								'keys':[dst,],
								str(dst):{
									'src':src,
									'dst':dst,
									'count':1,
									'country_code':country_code,
									'country_code3':country_code3,
									'country_name':country_name,
									#'region_name':region_name,
									'city':city,
									'latitude':latitude,
									'longitude':longitude,
									'netrange':netrange,#for d3 by classname
								},
							},
						}
			except:
				logging.exception(sys.exc_info())

	def getNetRange(self,ip):
		ip4=ip.split('.')
		netrange="%s.%s.%s.%s-%s.%s.%s.%s"%(ip4[0],'0','0','0',ip4[0],'255','255','255')
		return netrange

	def get_data(self,client_ip):
		try:
			logging.debug("get_data: "+client_ip)
			rval={'keys':['data'],'data':{'keys':[]}}
			if list(self.data.keys()).count(client_ip) > 0:
				rval={'keys':['data'],'data':copy.copy(self.data[client_ip])}
				rval['data']['keys']=list(self.data[client_ip].keys())
				del self.data[client_ip]
			else:
				logging.debug("client_ip not found: "+client_ip)

			self.data[client_ip]={}
			self.data[client_ip].__init__()
			self.ttl[client_ip]=time.perf_counter()+10
			logging.debug("get_data returning normally")
			if not rval:logging.debug("rval is None btw!")
			logging.debug(rval)
			return rval
		except(e):
			logging.exception(sys.exc_info())

	def toggle_running(self,*args):
		if not self.t:
			self.t = threading.Thread(target=self.harvest)
			self.t.daemon = True
			self.t.start()

		if not self.RUNNING:self.RUNNING=True
		else:self.RUNNING=False

	def run(self):
		logging.debug("run")
		#self.RUNNING=False
		self.server=SimpleXMLRPCServer((SPECTRAD_HOSTNAME,8009))
		self.server.register_introspection_functions()
		self.server.register_instance(self)

		self.toggle_running()

		self.server.serve_forever()


if __name__=="__main__":
	daemon=SpectraDaemonProcess(SPECTRAD_PID)
	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:daemon.start()
		elif 'stop'==sys.argv[1]:daemon.stop()
