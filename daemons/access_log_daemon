#!/usr/bin/env python
from daemon import Daemon
from service_utils import *
from dict_formatter import *
from processor import *

FORMAT = '%(message)s'
logging.basicConfig(filename=ACCESS_LOG,level=logging.DEBUG,format=FORMAT)

BOT_STRINGS=['bot','sleuth','checker','spider','slurp','search','crawl','siteexplorer','java']
HACK_STRINGS=[]

rexp = re.compile('([^ ]*) ([^ ]*) ([^ ]*) \[([^]]*)\] "([^"]*)" ([^ ]*) ([^ ]*)' ' "([^"]*)" "([^"]*)"')

class DaemonProcess(Daemon):
	def __init__(self,pidfile):
		Daemon.__init__(self,pidfile)
		self.t_last_call=time.time()
		self.buffer=[]

	def get_data(self,*args):

		self.t_last_call=time.time()

		if not self.RUNNING:
			self.RUNNING=True
			logging.debug("access_log_daemon self-starting")
			for logfile in ACCESS_LOGS:
				thread.start_new_thread(self.while_running,(logfile,))

		"""
		assume only 1 client and clear data each time requested
		"""
		rval=copy.copy(self.buffer)
		self.buffer.__init__()
		return rval

	def while_running(self,*args):

		cmd="tail -0f %s"%args[0]
		logging.debug(cmd)

		which_file=os.path.basename(args[0])

		p=os.popen(cmd)
		self.t_last_call=time.time()

		while self.RUNNING:

			if self.t_last_call<time.time()-30:
				self.RUNNING=False
				logging.debug("access_log_daemon self-stopping")

			line=p.readline()

			a=rexp.match(line)
			if not a:continue

			rdict={}
			try:
				rdict=ProcessLine(a)
				ip=string.strip(a.group(1))
				if ip!=rdict['ip']:logging.debug("EMERGENCY!")
				rdict['which_file']=which_file
				rdict['tstamp']=mktstamp()
				rdict['time']=time.time()

			except Exception,e:
				logging.debug(e)

			strdict=json.dumps(rdict)
			logging.debug(strdict)
			self.buffer.append(strdict)

		p.close()

	"""
	This is strdict:
	{"ip": "12.34.56.78", "postal_code": "54321", "country_code": "US", "city": "Springfield", "orgname": "Comcast Cable Communications, Inc.", "dma_code": 820, "which_file": "access.dev", "latitude": 45.5222, "rcode": "200", "tod": "-", "refer": "ttp://dev.asymptopia.org/lanwatch", "area_code": 503, "country_name": "United States", "netrange": " 76.96.0.0 - 76.127.255.255", "region": "OR", "bytes": "433", "longitude": -122.85929999999999, "tstamp": "2016-08-05 22:57:01", "country_code3": "USA", "url": "/lanwatch/?get_data", "time": 1470463021.314798, "action": "ET", "browser": "ozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:45.0) Gecko/20100101 Firefox/45."}
	"""



	def run(self):

		self.RUNNING=False

		self.server=SimpleXMLRPCServer((get_rpc_hostname(),ACCESS_LOG_SERVICE_PORT))
		self.server.register_introspection_functions()
		self.server.register_instance(self)
		self.server.serve_forever()



if __name__=="__main__":

	daemon=DaemonProcess('/var/run/access_log_daemon.pid')

	if len(sys.argv)==2:
		if 'start'==sys.argv[1]:
			daemon.start()
		elif 'stop'==sys.argv[1]:
			daemon.stop()
		elif 'restart'==sys.argv[1]:
			daemon.restart()
		elif 'status'==sys.argv[1]:
			if os.path.exists('/var/run/access_log_daemon.pid'):
				print 'running'
			else:
				print 'stopped'

		else:
			logging.debug("UNK")
			print "Unknown command"
			sys.exit(2)
		sys.exit(0)
	else:
		print "usage: %s start|stop|restart|status"%sys.argv[0]
		sys.exit(2)
